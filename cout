[31m

#################################VECTOR TEST#############################
[0m

[31m######## CONSTRUCTOR OPERATOR= TEST ########
[0m

myvector : 
size : 5, capacity : 5
[4] [4] [4] [4] [4] 

myvector6 : 
size : 0, capacity : 0


myvector6 : 
size : 5, capacity : 5
[4] [4] [4] [4] [4] 

myvector 2 : 
size : 10, capacity : 10
[20] [20] [20] [20] [20] [20] [20] [20] [20] [20] 

myvector 3 : 
size : 10, capacity : 10
[20] [20] [20] [20] [20] [20] [20] [20] [20] [20] 

myvector 4 : 
size : 10, capacity : 10
[20] [20] [20] [20] [20] [20] [20] [20] [20] [20] 

myvector 5 : 
size : 10, capacity : 10
[42] [42] [42] [42] [42] [42] [42] [42] [42] [42] 

myvector 4 : 
size : 10, capacity : 10
[42] [42] [42] [42] [42] [42] [42] [42] [42] [42] 

[31m######## ELEMENT ACCESS ########
[0m

myvector 3 : 
size : 11, capacity : 20
[23] [20] [20] [20] [20] [42] [20] [20] [20] [20] [8] 

front function value : 23
begin function value : 23
back function value : 8
at(5) function value : 42
[31m
######## CAPACITY TEST ########
[0m

max_size myvector : 1152921504606846975
max_size myvector 3 : 2305843009213693951

resize(30, 67) myvector 2 : 
size : 30, capacity : 30
[20] [20] [20] [20] [20] [20] [20] [20] [20] [20] [67] [67] [67] [67] [67] [67] [67] [67] [67] [67] [67] [67] [67] [67] [67] [67] [67] [67] [67] [67] 

resize(15, 12) myvector 2 : 
size : 15, capacity : 30
[20] [20] [20] [20] [20] [20] [20] [20] [20] [20] [67] [67] [67] [67] [67] 

empty myvector 4 : 0
empty myvector 7 : 1

myvector 3 : 
size : 11, capacity : 20
[23] [20] [20] [20] [20] [42] [20] [20] [20] [20] [8] 

reserve(40) myvector 3 : size : 11, capacity : 40
[23] [20] [20] [20] [20] [42] [20] [20] [20] [20] [8] 

reseve(20) myvector 3 : size : 11, capacity : 40
[23] [20] [20] [20] [20] [42] [20] [20] [20] [20] [8] 

[31m
######## MODIFIER TEST ########
[0m

myvector 5 : 
size : 10, capacity : 10
[42] [42] [42] [42] [42] [42] [42] [42] [42] [42] 

myvector 5 erase(begin, begin + 5) : 
size : 5, capacity : 10
[42] [42] [42] [42] [42] 

myvector 5 erase(end() - 3) : 
size : 4, capacity : 10
[42] [42] [42] [42] 

myvector 5 insert(begin() + 2, 7) : 
size : 5, capacity : 10
[42] [42] [7] [42] [42] 

myvector 5 insert(begin() + 3, 10, 30) : 
size : 15, capacity : 15
[42] [42] [7] [30] [30] [30] [30] [30] [30] [30] [30] [30] [30] [42] [42] 

myvector 3 : 
size : 11, capacity : 40
[23] [20] [20] [20] [20] [42] [20] [20] [20] [20] [8] 

myvector 5 insert(begin() + 7, myvector3.begin(), myvector3.end()) : 
size : 26, capacity : 30
[42] [42] [7] [30] [30] [30] [30] [23] [20] [20] [20] [20] [42] [20] [20] [20] [20] [8] [30] [30] [30] [30] [30] [30] [42] [42] 

myvector 3 assign(myvector5.begin(), myvector5.end()) : 
size : 26, capacity : 40
[42] [42] [7] [30] [30] [30] [30] [23] [20] [20] [20] [20] [42] [20] [20] [20] [20] [8] [30] [30] [30] [30] [30] [30] [42] [42] 

myvector 3 assign(10, 10) : 
size : 10, capacity : 40
[10] [10] [10] [10] [10] [10] [10] [10] [10] [10] 

myvector 4 : 
size : 10, capacity : 10
[42] [42] [42] [42] [42] [42] [42] [42] [42] [42] 

myvector 4 clear(): 
myvector 4 : 
size : 0, capacity : 10


myvector 3 swap myvector 4 : 
myvector 4 : 
size : 10, capacity : 40
[10] [10] [10] [10] [10] [10] [10] [10] [10] [10] 

myvector 3 : 
size : 0, capacity : 10


myvector 4 push_back * 4, 5: 
size : 14, capacity : 40
[10] [10] [10] [10] [10] [10] [10] [10] [10] [10] [5] [5] [5] [5] 

myvector 4 pop_back * 4: 
size : 10, capacity : 40
[10] [10] [10] [10] [10] [10] [10] [10] [10] [10] 

[31m
######## RELATIONAL OPERATOR TEST ########
[0m

foo and bar are not equal
foo is less than bar
foo is less than or equal to bar

foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar

foo and bar are equal
foo is less than or equal to bar
foo is greater than or equal to bar
[31m
######## REVERSE ITERATOR TEST ########
[0m

Reverse iterator print myvector 5 : 
[42] [42] [30] [30] [30] [30] [30] [30] [8] [20] [20] [20] [20] [42] [20] [20] [20] [20] [23] [30] [30] [30] [30] [7] [42] [42] 

myvector 5 : 
size : 26, capacity : 30
[42] [42] [7] [30] [30] [30] [30] [23] [20] [20] [20] [20] [42] [20] [20] [20] [20] [8] [30] [30] [30] [30] [30] [30] [42] [42] 

iterator print myvector 5
[42] [42] [7] [30] [30] [30] [30] [23] [20] [20] [20] [20] [42] [20] [20] [20] [20] [8] [30] [30] [30] [30] [30] [30] [42] [42] 

[31m
######## STACK TEST ########
[0m

stack with ft::vector
empty: 1
push * 2
empty: 0
return top function: 2
pop
Size of stack: 1
push * 4
Size of stack: 5
return top function: 6


stack with std::list
empty: 1
push * 2
empty: 0
return top function: 2
pop
Size of stack: 1
push * 4
Size of stack: 5
return top function: 6


relational operator
a and b are equal
b and c are not equal
a is less than or equal to b
a is greater than or equal to b


[31m
######## MAP TEST ########
[0m

[31m######## CONSTRUCTOR OPERATOR TEST ########
[0m

size : 0
empty map : 1
max size : 128102389400760775


mymap :
size : 7
empty map : 0
max size : 128102389400760775
Key : 0 | Value : peut-Ãªtre
Key : 4 | Value : oui
Key : 12 | Value : non
Key : 45 | Value : probablement
Key : 72 | Value : pourquoi pas
Key : 86 | Value : certainement
Key : 100 | Value : surement


mymap2 copy  iterator mymap :
size : 7
empty map : 0
max size : 128102389400760775
Key : 0 | Value : peut-Ãªtre
Key : 4 | Value : oui
Key : 12 | Value : non
Key : 45 | Value : probablement
Key : 72 | Value : pourquoi pas
Key : 86 | Value : certainement
Key : 100 | Value : surement


mymap3 copy construct mymap2 :
size : 7
empty map : 0
max size : 128102389400760775
Key : 0 | Value : peut-Ãªtre
Key : 4 | Value : oui
Key : 12 | Value : non
Key : 45 | Value : probablement
Key : 72 | Value : pourquoi pas
Key : 86 | Value : certainement
Key : 100 | Value : surement


mymap4 operator = mymap3 :
size : 7
empty map : 0
max size : 128102389400760775
Key : 0 | Value : peut-Ãªtre
Key : 4 | Value : oui
Key : 12 | Value : non
Key : 45 | Value : probablement
Key : 72 | Value : pourquoi pas
Key : 86 | Value : certainement
Key : 100 | Value : surement


mymap operator[]
oui
non
mymap : size : 7
empty map : 0
max size : 128102389400760775
Key : 0 | Value : peut-Ãªtre
Key : 4 | Value : oui
Key : 12 | Value : non
Key : 45 | Value : probablement
Key : 72 | Value : pourquoi pas
Key : 86 | Value : certainement
Key : 100 | Value : surement



mymap :
size : 8
empty map : 0
max size : 128102389400760775
Key : 0 | Value : peut-Ãªtre
Key : 4 | Value : plop42
Key : 12 | Value : non
Key : 13 | Value : 
Key : 45 | Value : probablement
Key : 72 | Value : pourquoi pas
Key : 86 | Value : certainement
Key : 100 | Value : surement


[31m######## Upper/Lower bound, equal range test ########
[0m

low : b
up : e

mymaps :
size : 5
empty map : 0
max size : 230584300921369395
Key : a | Value : 20
Key : b | Value : 40
Key : c | Value : 60
Key : d | Value : 80
Key : e | Value : 100


equal range test : 
lower bound points to: b => 40
upper bound points to: c => 60
[31m######## modifiers test ########
[0m

mymap :
size : 8
empty map : 0
max size : 128102389400760775
Key : 0 | Value : peut-Ãªtre
Key : 4 | Value : plop42
Key : 12 | Value : non
Key : 13 | Value : 
Key : 45 | Value : probablement
Key : 72 | Value : pourquoi pas
Key : 86 | Value : certainement
Key : 100 | Value : surement


mymap_insert :
size : 7
empty map : 0
max size : 128102389400760775
Key : 15 | Value : non
Key : 28 | Value : peut-Ãªtre
Key : 33 | Value : probablement
Key : 55 | Value : surement
Key : 57 | Value : pourquoi pas
Key : 99 | Value : certainement
Key : 120 | Value : oui


mymap insert(mymap_insert.begin(), mymap_insert.end()):
size : 15
empty map : 0
max size : 128102389400760775
Key : 0 | Value : peut-Ãªtre
Key : 4 | Value : plop42
Key : 12 | Value : non
Key : 13 | Value : 
Key : 15 | Value : non
Key : 28 | Value : peut-Ãªtre
Key : 33 | Value : probablement
Key : 45 | Value : probablement
Key : 55 | Value : surement
Key : 57 | Value : pourquoi pas
Key : 72 | Value : pourquoi pas
Key : 86 | Value : certainement
Key : 99 | Value : certainement
Key : 100 | Value : surement
Key : 120 | Value : oui


mymap_insert clear :
size : 0
empty map : 1
max size : 128102389400760775


mymap :
size : 12
empty map : 0
max size : 128102389400760775
Key : 0 | Value : peut-Ãªtre
Key : 4 | Value : plop42
Key : 12 | Value : non
Key : 15 | Value : non
Key : 28 | Value : peut-Ãªtre
Key : 45 | Value : probablement
Key : 55 | Value : surement
Key : 57 | Value : pourquoi pas
Key : 72 | Value : pourquoi pas
Key : 86 | Value : certainement
Key : 100 | Value : surement
Key : 120 | Value : oui


reverse iterator mymap : 
120 => oui
100 => surement
86 => certainement
72 => pourquoi pas
57 => pourquoi pas
55 => surement
45 => probablement
28 => peut-Ãªtre
15 => non
12 => non
4 => plop42
0 => peut-Ãªtre

mymap.swap(mymap_insert)
mymap :
size : 0
empty map : 1
max size : 128102389400760775


mymap_insert :
size : 12
empty map : 0
max size : 128102389400760775
Key : 0 | Value : peut-Ãªtre
Key : 4 | Value : plop42
Key : 12 | Value : non
Key : 15 | Value : non
Key : 28 | Value : peut-Ãªtre
Key : 45 | Value : probablement
Key : 55 | Value : surement
Key : 57 | Value : pourquoi pas
Key : 72 | Value : pourquoi pas
Key : 86 | Value : certainement
Key : 100 | Value : surement
Key : 120 | Value : oui


[31m######## Relational operator/swap ########
[0m

foo_m and bar_m are not equal
foo_m is greater than bar_m
foo_m is greater than or equal to bar_m

foo_m and bar_m are not equal
foo_m is less than bar_m
foo_m is less than or equal to bar_m

foo_m and bar_m are equal
foo_m is less than or equal to bar_m
foo_m is greater than or equal to bar_m
[31m######## SET TEST ########
[0m

[31m######## CONSTRUCTOR OPERATOR TEST ########
[0m

size : 0
empty set : 1
max size : 230584300921369395


myset :
size : 7
empty set : 0
max size : 230584300921369395
Value :2
Value :4
Value :12
Value :42
Value :77
Value :85
Value :96


myset2 copy  iterator myset :
size : 7
empty set : 0
max size : 230584300921369395
Value :2
Value :4
Value :12
Value :42
Value :77
Value :85
Value :96


myset3 copy construct myset2 :
size : 7
empty set : 0
max size : 230584300921369395
Value :2
Value :4
Value :12
Value :42
Value :77
Value :85
Value :96


myset4 operator = myset3 :
size : 7
empty set : 0
max size : 230584300921369395
Value :2
Value :4
Value :12
Value :42
Value :77
Value :85
Value :96


[31m######## Upper/Lower bound, equal range test ########
[0m

low : 0
up : 0

mysets :
size : 0
empty set : 1
max size : 230584300921369395


equal range test : 
lower bound points to: 0 => 0
upper bound points to: 0 => 0
[31m######## modifiers test ########
[0m

myset :
size : 7
empty set : 0
max size : 230584300921369395
Value :2
Value :4
Value :12
Value :42
Value :77
Value :85
Value :96


myset_insert :
size : 7
empty set : 0
max size : 230584300921369395
Value :15
Value :28
Value :33
Value :55
Value :57
Value :99
Value :120


myset insert(myset_insert.begin(), myset_insert.end()):
size : 14
empty set : 0
max size : 230584300921369395
Value :2
Value :4
Value :12
Value :15
Value :28
Value :33
Value :42
Value :55
Value :57
Value :77
Value :85
Value :96
Value :99
Value :120


myset_insert clear :
size : 0
empty set : 1
max size : 230584300921369395


myset :
size : 11
empty set : 0
max size : 230584300921369395
Value :2
Value :4
Value :12
Value :28
Value :42
Value :55
Value :57
Value :77
Value :85
Value :99
Value :120


reverse iterator myset : 
120
99
85
77
57
55
42
28
12
4
2

myset.swap(myset_insert)
myset :
size : 0
empty set : 1
max size : 230584300921369395


myset_insert :
size : 11
empty set : 0
max size : 230584300921369395
Value :2
Value :4
Value :12
Value :28
Value :42
Value :55
Value :57
Value :77
Value :85
Value :99
Value :120


[31m######## Relational operator/swap ########
[0m

foo_set and bar_set are not equal
foo_set is less than bar_set
foo_set is less than or equal to bar_set

foo_set and bar_set are not equal
foo_set is greater than bar_set
foo_set is greater than or equal to bar_set

foo_set and bar_set are equal
foo_set is less than or equal to bar_set
foo_set is greater than or equal to bar_set
